In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Example 2:


Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]
JAVA CODE:
class Solution {
    public boolean checkcycle(List<List<Integer>>adj, int V, int src){
        boolean visited[] = new boolean[V+1]; 
        return dfs(adj, V, visited, src, -1);
    }
    
    public boolean dfs(List<List<Integer>>adj, int V, boolean visited[] ,int node, int par){
        visited[node] = true;
        for(int it: adj.get(node)){
            if(!visited[it]) {
                if(dfs(adj, V, visited,it, node))
                    return true;
            } else {
                if(it!=par){
                    return true;
                }
            }
        }
        
        return false;
    }
    public int[] findRedundantConnection(int[][] edges) {
        List<List<Integer>>adj = new ArrayList<>();
        int res[] = null;
        int V = edges.length;
        for(int i=0;i<=V;i++){
            adj.add(new ArrayList<>());
        }
        for(int edge[] : edges){
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
            if(checkcycle(adj, V,u))
                return edge;
        }
        
        return res;
    }
}
