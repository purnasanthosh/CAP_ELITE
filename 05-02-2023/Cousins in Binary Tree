Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
JAVA CODE :
 class pair{
     TreeNode node;
     int level;
     TreeNode parent;
     pair(TreeNode n,int lev,TreeNode par){
         node=n;
         level=lev;
         parent=par;
     }
 }
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root==null ||  root.val==x || root.val==y) return false;
        int xx=0,yy=0,xp=0,yp=0;
        Queue<pair> q=new LinkedList<>();
        q.add(new pair(root,0,null));
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                pair top=q.poll();
                TreeNode node=top.node;
                if(node.val==x){
                     xx=top.level;
                     xp=top.parent.val;
                }
                if(node.val==y){
                    yy=top.level;
                    yp=top.parent.val;
                } 
                if(node.left!=null) q.add(new pair(node.left,top.level+1,node));
                if(node.right!=null) q.add(new pair(node.right,top.level+1,node));
            }
        }
        if(xx==yy && xp!=yp) return true;
        return false;
        
    }
}
