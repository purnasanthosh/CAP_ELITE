Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the extreme ones only(i.e. leftmost and rightmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.
Example 1:
Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:
Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100
JAVA CODE SOLUTION:


//User function Template for Java

/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/
class pair{
    int line;
    Node node;
   public   pair(int _line,Node _node){
        line=_line;
        node=_node;
    }
    
}
class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        ArrayList<Integer> ans=new ArrayList<>();
        if(root==null) return ans;
        Map<Integer,Integer> map=new TreeMap<>();
        Queue<pair> q=new LinkedList<pair>();
        q.add(new pair(0,root));
        while(!q.isEmpty()){
        pair it=q.remove();
        Node temp=it.node;
        int line=it.line;
        if(map.get(line)==null) map.put(line,temp.data);
        if(temp.left!=null) {
        q.add( new pair(line-1,temp.left));
        }
        if(temp.right!=null) {
        q.add( new pair(line+1,temp.right));
        }
        }
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            ans.add(entry.getValue());
        }
        return ans;
        
        
    }
}
