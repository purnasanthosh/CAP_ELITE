Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Example 2:
Input: root = [1,null,3]
Output: [1,3]
Example 3:
Input: root = []
Output: []
JAVA LEVEL ORDER CODE SOLUTION:
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if(root==null) return list;
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode node=q.poll();
                 if(i==size-1) list.add(node.val);
                if(node.left!=null) q.offer(node.left);
                if(node.right!=null) q.offer(node.right);
            }
            
        }
        return list;
        
    }
}
JAVA RECURSIVE CODE SOLUTION:
class Solution {
    public void right(TreeNode root,List<Integer> list,int level){
        if(root==null) return;
        if(level==list.size())
        list.add(root.val);
        right(root.right,list,level+1);
        right(root.left,list,level+1);
        
    }
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        right(root,list,0);
        return list;
        
    }
}
