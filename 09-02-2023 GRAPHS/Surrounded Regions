Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
Example 2:

Input: board = [["X"]]
Output: [["X"]]
JAVA CODE:
class Solution {
    public void dfs(char[][] board,int row,int col){
        if(row<0 || col<0 ||  row>=board.length || col>=board[0].length || board[row][col]=='X' || board[row][col]=='V' ){
            return;
        }
        if(board[row][col]=='O') board[row][col]='V';
        dfs(board,row+1,col);
        dfs(board,row-1,col);
        dfs(board,row,col+1);
        dfs(board,row,col-1);
    }
    public void solve(char[][] board) {
        int m=board.length,n=board[0].length;
        //Boundary cases
        for(int i=0;i<n;i++){
            dfs(board,0,i);
            dfs(board,m-1,i);

        }
         for(int i=0;i<m;i++){
            dfs(board,i,0);
            dfs(board,i,n-1);

        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                    
                }
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='V'){
                    board[i][j]='O';
                    
                }
            }
        }
        
    }
}
