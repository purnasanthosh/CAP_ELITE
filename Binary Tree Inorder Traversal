Given the root of a binary tree, return the inorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:
Input: root = []
Output: []
JAVA RECURSIVE SOLUTION:
class Solution {
    public void inorder(TreeNode root,List<Integer>list){
        if(root==null) return;
        inorder(root.left,list);
        list.add(root.val);
        inorder(root.right,list);
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        inorder(root,list);
        return list;    
    }
}
T.C-O(N)
S.C-O(N)
JAVA NON-RECURSIVE SOLUTION:
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if(root==null) return list;
        Stack<TreeNode> st=new Stack<>();
        TreeNode node=root;
        while(true){
            if(node!=null){
                st.push(node);
                node=node.left;
            }
            else{
                if(st.isEmpty()) {
                    break;
                }
                 node=st.pop();
                list.add(node.val);
                node=node.right;
            }
        }
        return list;
        
    }
}
