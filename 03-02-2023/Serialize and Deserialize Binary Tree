Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.
Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]
Example 2:

Input: root = []
Output: []
JAVA CODE:
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null) return "";
        StringBuilder sb=new StringBuilder();
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode node=q.poll();
            if(node==null){
                sb.append("# ");
                continue;
            }
             sb.append(node.val+" ");
             q.offer(node.left);
             q.offer(node.right);

        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data=="") return null;
        String [] arr=data.split(" ");
        Queue<TreeNode> q1=new LinkedList<>();
        TreeNode curr=new TreeNode(Integer.parseInt(arr[0]));
        q1.add(curr);
        for(int i=1;i<arr.length;i++){
            TreeNode node=q1.poll(); 
    
            if(!arr[i].equals("#")){
               TreeNode left=new TreeNode(Integer.parseInt(arr[i]));
                node.left=left;
                q1.add(left);

            }
            if(!arr[++i].equals("#")){
                TreeNode  right=new TreeNode(Integer.parseInt(arr[i]));
                 node.right=right;
                 q1.add(right);

            }
        }

       return curr;
        
    }
}
