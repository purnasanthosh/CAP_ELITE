Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.
A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.
Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22
Example 2:
Input: root = [1,2,3], targetSum = 5
Output: []
Example 3:
Input: root = [1,2], targetSum = 0
Output: []
JAVA CODE SOLUTION:
class Solution {
    public void path(TreeNode curr,int targetSum,List<Integer> list,List<List<Integer>> res){
        if(curr==null) return;
         list.add(curr.val);
        if(curr.left==null && curr.right==null){
            if(curr.val==targetSum){
                res.add(new ArrayList<>(list));
            }
        
        }
        path(curr.left,targetSum-curr.val,list,res);
        path(curr.right,targetSum-curr.val,list,res);
        list.remove(list.size()-1);
    }
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        path(root,targetSum,list,res);
        return res; 
    }
}
