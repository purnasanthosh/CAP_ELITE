Given two strings s and t of lengths m and n respectively, return the minimum window 
substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.
Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:
Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:
Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
JAVA CODE:
class Solution {
    public String minWindow(String s, String t) {
        if(s.length()==0 || t.length()==0 || t.length()>s.length()) return "";
        Map<Character,Integer> tmap=new HashMap<>();
        for(int i=0;i<t.length();i++){
            tmap.put(t.charAt(i),tmap.getOrDefault(t.charAt(i),0)+1);
        }
        Map<Character,Integer> smap=new HashMap<>();
        int left=0,right=0,count=0,minstart=0,minlen=Integer.MAX_VALUE;
        while(right<s.length()){
            if(tmap.containsKey(s.charAt(right))){
                if(smap.containsKey(s.charAt(right))){
                    if(smap.get(s.charAt(right))<tmap.get(s.charAt(right))){
                        count++;
                    }
                   smap.put(s.charAt(right),smap.get(s.charAt(right))+1);
                }
                else{
                    count++;
                    smap.put(s.charAt(right),1);
                }

            }
            right++;

            while(count==t.length()){
                if((right-left)<minlen){
                    minlen=right-left;
                    minstart=left;
                }
                if(tmap.containsKey(s.charAt(left))){
                    if(smap.get(s.charAt(left))>tmap.get(s.charAt(left))){
                        smap.put(s.charAt(left),smap.get(s.charAt(left))-1);

                    }
                    else{
                        smap.put(s.charAt(left),smap.get(s.charAt(left))-1);
                        count--;

                    }
                }
                left++;
            }
        }
        if(minlen==Integer.MAX_VALUE) return "";
        return s.substring(minstart,minstart+minlen);      
    }
}
