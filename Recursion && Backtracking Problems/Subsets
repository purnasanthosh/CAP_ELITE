Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
Java code:
class Solution {
    public void rec(int ind,int [] nums, List<Integer> list,List<List<Integer>> res){
        if(ind==nums.length){
            res.add(new ArrayList<>(list)); //Base Case
            return;//Return type of method
        }
        list.add(nums[ind]);//pick case 
        rec(ind+1,nums,list,res);//call next index
        list.remove(list.size()-1); //Non-pick case
        rec(ind+1,nums,list,res);//call next index 
    }
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        rec(0,nums,list,res);//Start with 0th index
        return res;

        
    }
}
Method 2:
class Solution {
    public void rec(int ind,int [] nums, List<Integer> list,List<List<Integer>> res){
        res.add(new ArrayList<>(list));
        for(int i=ind;i<nums.length;i++){
            list.add(nums[i]);
            rec(i+1,nums,list,res);
            list.remove(list.size()-1);
        }
    }
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        rec(0,nums,list,res);//Start with 0th index
        return res;

        
    }
}
