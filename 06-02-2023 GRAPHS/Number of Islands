Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
JAVA CODE BFS :
class pair{
    int row;
    int col;
    pair(int r,int c){
        row=r;
        col=c;
    }
}
class Solution {
    public void bfs(char [][] grid,int i,int j,int[][] vis){
        int m=grid.length,n=grid[0].length;
         Queue<pair> q=new LinkedList<>();
         q.offer(new pair(i,j));
          vis[i][j]=1;
        while(!q.isEmpty()){
            pair top=q.peek();
            int row=top.row;
            int col=top.col;
            q.poll();
            int [] delrow={-1,0,1,0};
            int [] delcol={0,1,0,-1};
            for(int k=0;k<4;k++){
                 int newrow=row+delrow[k];
                 int newcol=col+delcol[k];
                 if(newrow>=0 && newcol>=0 && newrow<m && newcol<n && vis[newrow][newcol]==0 && grid[newrow][newcol]=='1'){
                    q.offer(new pair(newrow,newcol));
                    vis[newrow][newcol]=1;
                 }
            }
        }
    }
    public int numIslands(char[][] grid) {
        int count=0;
        int m=grid.length,n=grid[0].length;
        int [][] vis=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]==0 && grid[i][j]=='1'){
                    bfs(grid,i,j,vis);
                    count++;
                }
            }
        }
        return count;
        
    }
}
JAVA DFS CODE:
class Solution {
    int count=0;
    public void dfs(char[][] grid,int row,int col){
        if(row<0 || col<0 || row>=grid.length || col>=grid[0].length || grid[row][col]=='0'){
            return;
        }
        if(grid[row][col]=='1') grid[row][col]='0';
        dfs(grid,row+1,col);
        dfs(grid,row-1,col);
        dfs(grid,row,col+1);
        dfs(grid,row,col-1);
    }

    public int numIslands(char[][] grid) {
        int m=grid.length,n=grid[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    count++;
                    dfs(grid,i,j);
                }
            }
        }
        return count;
        
    }
}
