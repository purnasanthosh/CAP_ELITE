Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

 

Example 1:


Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.
Example 2:


Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.
JAVA CODE:
class tuple{
    int row;
    int col;
    int step;
    public tuple(int ro,int co,int st){
        row=ro;
        col=co;
        step=st;
    }
}
class Solution {
    public int maxDistance(int[][] grid) {
        int m=grid.length,n=grid[0].length;
        int res=0;
        int [][] vis=new int[m][n];
        Queue<tuple> q=new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                vis[i][j]=grid[i][j];
                if(grid[i][j]==1){
                    q.add(new tuple(i,j,0));
                }
            }
        }
        int [] delrow={-1,0,1,0};
        int [] delcol={0,1,0,-1};
        while(!q.isEmpty()){
            tuple top=q.poll();
            int row=top.row;
            int col=top.col;
            int step=top.step;
            res=step;
            for(int i=0;i<4;i++){
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && vis[nrow][ncol]==0 && grid[nrow][ncol]==0 ){
                    q.add(new tuple(nrow,ncol,step+1));
                    vis[nrow][ncol]=1;

                }
            }

        }
        if(res==0) return -1;
        return res;


        
    }
}
