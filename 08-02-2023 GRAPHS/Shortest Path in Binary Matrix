Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
JAVA CODE:
class pair{
    int row;
    int col;
    int step;
    public pair(int r,int c,int st){
        row=r;
        col=c;
        step=st;
    }
}
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int minpath=-1;
        int n=grid.length;
        Queue<pair> q=new LinkedList<>();
        if(grid[0][0]==0 && grid[n-1][n-1]==0){
            q.offer(new pair(0,0,1));
        }
        if(n==1 && grid[n-1][n-1]==0) return 1; 
        while(!q.isEmpty()){
            pair top=q.peek();
            int row=top.row;
            int col=top.col;
            int step=top.step;
            q.poll();
            if(row==n-1 && col==n-1)minpath=step;
            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){
                    int newrow=row+i;
                    int newcol=col+j;
                    if(newrow>=0 && newrow<n && newcol>=0 && newcol<n && grid[newrow][newcol]==0)
                    {         
                        grid[newrow][newcol]=2;           
                        q.offer(new pair(newrow,newcol,step+1));

                    }
                }
            }
        }
        return minpath;
        
    }
}
