Given the root of a binary tree, return the maximum width of the given tree
The maximum width of a tree is the maximum width among all levels.
The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
It is guaranteed that the answer will in the range of a 32-bit signed integer.
Example 1:
Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).
Example 2:
Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).
JAVA CODE:
class pair{
     TreeNode node;
     int value;
     public pair(TreeNode n,int v){
         node=n;
         value=v;
     }
 }
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        int max=0;
        Queue<pair> q=new LinkedList<>();
        q.add(new pair(root,0));

        while(!q.isEmpty()){
            int size=q.size();
            pair top=q.peek();
            TreeNode node=top.node;
            int min=top.value;
            int first=0,last=0;
            for(int i=0;i<size;i++){
                pair top1=q.poll();
                int currvalue=top1.value-min;
                if(i==0) first=currvalue;
                if(i==size-1) last=currvalue;
                if(top1.node.left!=null){
                    q.add(new pair(top1.node.left,2*currvalue+1));
                }
                 if(top1.node.right!=null){
                    q.add(new pair(top1.node.right,2*currvalue+2));
                }

            }
                max=Math.max(max,last-first+1);

        }
        return max;
        
    }
}
Console
